require("dotenv").config()
const g_cToggleProcessing = require("../utilities/processing.ts")


/*This code initializes a database connection and manages collection setup.
It performs resetting of collections while applying schema validators,
typically used for database schema initialization or recreation.

Key Operations:
1. Establishes MongoDB connection
2. Destroys existing collections (development-only behavior)
3. Recreates collections with JSON schema validators
4. Ensures clean schema setup for application data models*/

module.exports = async function() {
	/*Provides user-facing status updates and
	Indicates connection success/failure*/
	g_cToggleProcessing("Attempting database connection.")
	/* Database Connection Process
    ----------------------------
    1. Retrieves pre-configured MongoDB client from main.ts
    2. Connects using credentials from .env file
    3. Selects database using DB_NAME environment variable */

	/*Establishes connection via external configuration
	Selects database using environment variable*/
	const l_coDb = (await require("./main.ts").get("Database connection").connect()).db(process.env.DB_NAME)
	g_cToggleProcessing()
	console.log("Database connected.")
	for (const [l_csCollectionName, l_coValidator] of require("./data.ts").get("Objects").entries()) {
	//	Destructive Action: Deletes existing collections
		await l_coDb.collection(l_csCollectionName).drop().catch(function(a_oError) {
			if (a_oError.code !== 26) throw a_oError
			console.log("No " + l_csCollectionName + " collection to drop.")
		})
		//	Validation Setup: Recreates collections with schema validators
		await l_coDb.createCollection(l_csCollectionName, l_coValidator)
		console.log(l_csCollectionName + " created.")
	}
	console.log("Collections registered.")
	return l_coDb
}